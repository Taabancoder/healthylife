<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåü HealthyLife Pro</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        header h1 {
            font-size: 3.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
            to { text-shadow: 2px 2px 20px rgba(255,255,255,0.5); }
        }

        .nav-tabs {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 30px;
        }

        .tab-btn {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 15px 30px;
            cursor: pointer;
            border-radius: 50px;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .tab-btn:hover, .tab-btn.active {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.8);
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
            backdrop-filter: blur(10px);
        }

        .tab-content.active {
            display: block;
            animation: slideIn 0.6s ease;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .card {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
        }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 25px 50px rgba(0,0,0,0.2);
        }

        .card h3 {
            color: #4a5568;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }

        .progress-container {
            margin: 15px 0;
        }

        .progress-bar {
            width: 100%;
            height: 12px;
            background: #e2e8f0;
            border-radius: 6px;
            overflow: hidden;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 6px;
            transition: width 0.8s ease;
        }

        .water-tracker {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 15px;
            justify-content: center;
        }

        .water-glass {
            width: 40px;
            height: 60px;
            background: #e2e8f0;
            border-radius: 0 0 20px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid #667eea;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            color: #667eea;
            font-weight: bold;
            font-size: 12px;
            padding-bottom: 5px;
        }

        .water-glass:hover {
            transform: scale(1.1);
        }

        .water-glass.filled {
            background: linear-gradient(to top, #4facfe 0%, #00f2fe 100%);
            color: white;
        }

        .habit-item {
            background: white;
            padding: 20px;
            border-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            margin-bottom: 15px;
        }

        .habit-checkbox {
            width: 30px;
            height: 30px;
            border: 2px solid #667eea;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 18px;
            font-weight: bold;
        }

        .habit-checkbox.checked {
            background: #667eea;
            color: white;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.6);
        }

        .input-group {
            margin-bottom: 20px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
        }

        .input-group input, .input-group select, .input-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .input-group input:focus, .input-group select:focus, .input-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 20px;
            text-align: center;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #48bb78;
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: #e53e3e;
        }

        .meal-item, .exercise-item {
            background: rgba(255, 255, 255, 0.7);
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        @media (max-width: 768px) {
            .container { padding: 10px; }
            header h1 { font-size: 2.5rem; }
            .tab-content { padding: 20px; }
            .dashboard-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üåü HealthyLife Pro</h1>
            <p>Your wellness companion with real-time tracking</p>
        </header>

        <div class="nav-tabs">
            <button class="tab-btn active" onclick="showTab('dashboard')">üìä Dashboard</button>
            <button class="tab-btn" onclick="showTab('habits')">‚úÖ Habits</button>
            <button class="tab-btn" onclick="showTab('nutrition')">üçé Nutrition</button>
            <button class="tab-btn" onclick="showTab('exercise')">üí™ Exercise</button>
            <button class="tab-btn" onclick="showTab('sleep')">üò¥ Sleep</button>
            <button class="tab-btn" onclick="showTab('analytics')">üìà Analytics</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>üíß Hydration Tracker</h3>
                    <p><strong>Today's Goal:</strong> <span id="water-count">0</span>/8 glasses</p>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div id="water-progress" class="progress-fill" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="water-tracker" id="water-glasses"></div>
                </div>

                <div class="card">
                    <h3>üéØ Today's Habits</h3>
                    <div id="habit-summary"></div>
                </div>

                <div class="card">
                    <h3>üèÉ‚Äç‚ôÇÔ∏è Activity Overview</h3>
                    <p><strong>Exercises Today:</strong> <span id="exercise-count">0</span></p>
                    <p><strong>Total Calories Burned:</strong> <span id="calories-burned">0</span></p>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div id="activity-progress" class="progress-fill" style="width: 0%"></div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>üçΩÔ∏è Nutrition Summary</h3>
                    <p><strong>Meals Logged:</strong> <span id="meals-count">0</span>/3</p>
                    <p><strong>Calories Consumed:</strong> <span id="calories-consumed">0</span></p>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div id="nutrition-progress" class="progress-fill" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Habits Tab -->
        <div id="habits" class="tab-content">
            <div class="card">
                <h3>‚úÖ Daily Habits Tracker</h3>
                <div id="habits-list"></div>
                <div style="margin-top: 30px;">
                    <div class="input-group">
                        <label>Add New Habit:</label>
                        <input type="text" id="new-habit" placeholder="Enter habit name">
                    </div>
                    <button class="btn" onclick="addNewHabit()">Add Habit</button>
                </div>
            </div>
        </div>

        <!-- Nutrition Tab -->
        <div id="nutrition" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>üçΩÔ∏è Meal Logger</h3>
                    <div class="input-group">
                        <label>Meal Type:</label>
                        <select id="meal-type">
                            <option value="breakfast">Breakfast</option>
                            <option value="lunch">Lunch</option>
                            <option value="dinner">Dinner</option>
                            <option value="snack">Snack</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label>Food Items:</label>
                        <textarea id="meal-items" placeholder="List the foods you ate" rows="3"></textarea>
                    </div>
                    <div class="input-group">
                        <label>Estimated Calories:</label>
                        <input type="number" id="meal-calories" placeholder="Enter calories">
                    </div>
                    <button class="btn" onclick="logMeal()">Log Meal</button>
                </div>

                <div class="card">
                    <h3>üìä Today's Nutrition</h3>
                    <div id="todays-meals"></div>
                </div>
            </div>
        </div>

        <!-- Exercise Tab -->
        <div id="exercise" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>üí™ Exercise Logger</h3>
                    <div class="input-group">
                        <label>Exercise Name:</label>
                        <input type="text" id="exercise-name" placeholder="e.g., Running, Push-ups">
                    </div>
                    <div class="input-group">
                        <label>Duration (minutes):</label>
                        <input type="number" id="exercise-duration" placeholder="Enter duration">
                    </div>
                    <div class="input-group">
                        <label>Calories Burned:</label>
                        <input type="number" id="exercise-calories" placeholder="Estimated calories">
                    </div>
                    <button class="btn" onclick="logExercise()">Log Exercise</button>
                </div>

                <div class="card">
                    <h3>üèÉ‚Äç‚ôÇÔ∏è Today's Workouts</h3>
                    <div id="todays-exercises"></div>
                </div>
            </div>
        </div>

        <!-- Sleep Tab -->
        <div id="sleep" class="tab-content">
            <div class="card">
                <h3>üò¥ Sleep Tracker</h3>
                <div class="dashboard-grid">
                    <div>
                        <div class="input-group">
                            <label>Bedtime:</label>
                            <input type="time" id="bedtime">
                        </div>
                        <div class="input-group">
                            <label>Wake Time:</label>
                            <input type="time" id="wake-time">
                        </div>
                        <div class="input-group">
                            <label>Sleep Quality (1-10): <span id="quality-value">7</span></label>
                            <input type="range" id="sleep-quality" min="1" max="10" value="7" oninput="updateQualityValue(this.value)">
                        </div>
                        <button class="btn" onclick="logSleep()">Log Sleep</button>
                    </div>
                    <div>
                        <h4>Sleep Statistics</h4>
                        <p><strong>Last Night:</strong> <span id="last-sleep">No data</span></p>
                        <div class="progress-container">
                            <div class="progress-bar">
                                <div id="sleep-progress" class="progress-fill" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics" class="tab-content">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="stat-water">0</div>
                    <div class="stat-label">Daily Water (glasses)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="stat-exercise">0</div>
                    <div class="stat-label">Exercise Sessions Today</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="stat-habits">0%</div>
                    <div class="stat-label">Habit Completion Rate</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="stat-calories">0</div>
                    <div class="stat-label">Total Calories Burned</div>
                </div>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        // Data storage - using memory instead of localStorage
        let currentData = {
            water_count: 0,
            habits: {
                meditation: false,
                exercise: false,
                reading: false,
                water_intake: false,
                healthy_eating: false
            },
            meals: [],
            exercises: [],
            sleep_data: {},
            last_updated: new Date().toDateString()
        };

        // Initialize the app
        function initApp() {
            updateWaterDisplay();
            updateHabitsDisplay();
            updateMealsDisplay();
            updateExercisesDisplay();
            updateSleepDisplay();
            updateAnalytics();
            checkDayReset();
        }

        function checkDayReset() {
            const today = new Date().toDateString();
            if (currentData.last_updated !== today) {
                currentData = {
                    water_count: 0,
                    habits: Object.keys(currentData.habits).reduce((acc, key) => {
                        acc[key] = false;
                        return acc;
                    }, {}),
                    meals: [],
                    exercises: [],
                    sleep_data: {},
                    last_updated: today
                };
                updateAllDisplays();
            }
        }

        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        function toggleWaterGlass(index) {
            if (index < currentData.water_count) {
                currentData.water_count = index;
            } else {
                currentData.water_count = index + 1;
            }
            
            updateWaterDisplay();
            updateAnalytics();
            
            if (currentData.water_count >= 8) {
                showNotification('üéâ Congratulations! You have reached your daily water goal!');
            }
        }

        function updateWaterDisplay() {
            document.getElementById('water-count').textContent = currentData.water_count;
            document.getElementById('water-progress').style.width = (currentData.water_count / 8 * 100) + '%';
            
            // Generate water glasses
            const waterGlassesContainer = document.getElementById('water-glasses');
            waterGlassesContainer.innerHTML = '';
            
            for (let i = 0; i < 8; i++) {
                const glass = document.createElement('div');
                glass.className = `water-glass ${i < currentData.water_count ? 'filled' : ''}`;
                glass.textContent = i + 1;
                glass.onclick = () => toggleWaterGlass(i);
                waterGlassesContainer.appendChild(glass);
            }
        }

        function toggleHabit(habitName) {
            currentData.habits[habitName] = !currentData.habits[habitName];
            updateHabitsDisplay();
            updateAnalytics();
            
            if (currentData.habits[habitName]) {
                showNotification('‚úÖ Great job completing: ' + habitName.replace('_', ' ') + '!');
            }
        }

        function updateHabitsDisplay() {
            const habitsContainer = document.getElementById('habits-list');
            const summaryContainer = document.getElementById('habit-summary');
            
            let habitsHTML = '';
            let summaryHTML = '';
            
            Object.keys(currentData.habits).forEach(habitName => {
                const completed = currentData.habits[habitName];
                const displayName = habitName.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
                
                const habitItemHTML = `
                    <div class="habit-item">
                        <span>${displayName}</span>
                        <div class="habit-checkbox ${completed ? 'checked' : ''}" onclick="toggleHabit('${habitName}')">
                            ${completed ? '‚úì' : ''}
                        </div>
                    </div>
                `;
                
                habitsHTML += habitItemHTML;
                summaryHTML += habitItemHTML;
            });
            
            habitsContainer.innerHTML = habitsHTML;
            summaryContainer.innerHTML = summaryHTML;
        }

        function addNewHabit() {
            const input = document.getElementById('new-habit');
            const habitName = input.value.trim().toLowerCase().replace(/\s+/g, '_');
            
            if (habitName && !currentData.habits.hasOwnProperty(habitName)) {
                currentData.habits[habitName] = false;
                input.value = '';
                updateHabitsDisplay();
                updateAnalytics();
                showNotification('New habit added: ' + habitName.replace('_', ' ') + '!');
            } else if (currentData.habits.hasOwnProperty(habitName)) {
                showNotification('Habit already exists!', 'error');
            }
        }

        function logMeal() {
            const mealType = document.getElementById('meal-type').value;
            const mealItems = document.getElementById('meal-items').value.trim();
            const mealCalories = parseInt(document.getElementById('meal-calories').value);
            
            if (!mealItems || !mealCalories) {
                showNotification('Please fill in all meal information', 'error');
                return;
            }
            
            const newMeal = {
                type: mealType,
                items: mealItems,
                calories: mealCalories,
                timestamp: new Date().toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit'})
            };
            
            // Remove existing meal of same type
            currentData.meals = currentData.meals.filter(m => m.type !== mealType);
            currentData.meals.push(newMeal);
            
            // Clear form
            document.getElementById('meal-items').value = '';
            document.getElementById('meal-calories').value = '';
            
            updateMealsDisplay();
            updateAnalytics();
            showNotification(mealType.charAt(0).toUpperCase() + mealType.slice(1) + ' logged successfully!');
        }

        function updateMealsDisplay() {
            const container = document.getElementById('todays-meals');
            const mealsCount = document.getElementById('meals-count');
            const caloriesConsumed = document.getElementById('calories-consumed');
            const nutritionProgress = document.getElementById('nutrition-progress');
            
            if (currentData.meals.length === 0) {
                container.innerHTML = '<p>No meals logged today. Start by adding your first meal!</p>';
            } else {
                let mealsHTML = '';
                currentData.meals.forEach(meal => {
                    mealsHTML += `
                        <div class="meal-item">
                            <h4>${meal.type.charAt(0).toUpperCase() + meal.type.slice(1)} (${meal.timestamp})</h4>
                            <p><strong>Items:</strong> ${meal.items}</p>
                            <p><strong>Calories:</strong> ${meal.calories}</p>
                        </div>
                    `;
                });
                container.innerHTML = mealsHTML;
            }
            
            const totalCalories = currentData.meals.reduce((sum, meal) => sum + meal.calories, 0);
            mealsCount.textContent = currentData.meals.length;
            caloriesConsumed.textContent = totalCalories;
            nutritionProgress.style.width = Math.min(currentData.meals.length / 3 * 100, 100) + '%';
        }

        function logExercise() {
            const name = document.getElementById('exercise-name').value.trim();
            const duration = parseInt(document.getElementById('exercise-duration').value);
            const calories = parseInt(document.getElementById('exercise-calories').value);
            
            if (!name || !duration || !calories) {
                showNotification('Please fill in all exercise information', 'error');
                return;
            }
            
            const newExercise = {
                name: name,
                duration: duration,
                calories: calories,
                timestamp: new Date().toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit'})
            };
            
            currentData.exercises.push(newExercise);
            
            // Clear form
            document.getElementById('exercise-name').value = '';
            document.getElementById('exercise-duration').value = '';
            document.getElementById('exercise-calories').value = '';
            
            updateExercisesDisplay();
            updateAnalytics();
            showNotification('Exercise "' + name + '" logged successfully!');
        }

        function updateExercisesDisplay() {
            const container = document.getElementById('todays-exercises');
            const exerciseCount = document.getElementById('exercise-count');
            const caloriesBurned = document.getElementById('calories-burned');
            const activityProgress = document.getElementById('activity-progress');
            
            if (currentData.exercises.length === 0) {
                container.innerHTML = '<p>No exercises logged today. Time to get moving!</p>';
            } else {
                let exercisesHTML = '';
                currentData.exercises.forEach(exercise => {
                    exercisesHTML += `
                        <div class="exercise-item">
                            <h4>${exercise.name} (${exercise.timestamp})</h4>
                            <p><strong>Duration:</strong> ${exercise.duration} minutes</p>
                            <p><strong>Calories Burned:</strong> ${exercise.calories}</p>
                        </div>
                    `;
                });
                container.innerHTML = exercisesHTML;
            }
            
            const totalCalories = currentData.exercises.reduce((sum, exercise) => sum + exercise.calories, 0);
            exerciseCount.textContent = currentData.exercises.length;
            caloriesBurned.textContent = totalCalories;
            activityProgress.style.width = Math.min(totalCalories / 500 * 100, 100) + '%';
        }

        function updateQualityValue(value) {
            document.getElementById('quality-value').textContent = value;
        }

        function logSleep() {
            const bedtime = document.getElementById('bedtime').value;
            const wakeTime = document.getElementById('wake-time').value;
            const quality = parseInt(document.getElementById('sleep-quality').value);
            
            if (!bedtime || !wakeTime) {
                showNotification('Please enter both bedtime and wake time', 'error');
                return;
            }
            
            try {
                const [bedHour, bedMin] = bedtime.split(':').map(Number);
                const [wakeHour, wakeMin] = wakeTime.split(':').map(Number);
                
                let bedTotal = bedHour * 60 + bedMin;
                let wakeTotal = wakeHour * 60 + wakeMin;
                
                if (wakeTotal < bedTotal) {
                    wakeTotal += 24 * 60;
                }
                
                const duration = Math.round((wakeTotal - bedTotal) / 60 * 10) / 10;
                
                currentData.sleep_data = {
                    bedtime: bedtime,
                    wake_time: wakeTime,
                    quality: quality,
                    duration: duration
                };
                
                updateSleepDisplay();
                updateAnalytics();
                showNotification(`Sleep logged: ${duration}h with quality ${quality}/10`);
                
            } catch (error) {
                showNotification('Invalid time format', 'error');
            }
        }

        function updateSleepDisplay() {
            const lastSleep = document.getElementById('last-sleep');
            const sleepProgress = document.getElementById('sleep-progress');
            
            if (currentData.sleep_data.duration) {
                lastSleep.textContent = `${currentData.sleep_data.duration}h (Quality: ${currentData.sleep_data.quality}/10)`;
                sleepProgress.style.width = Math.min(currentData.sleep_data.duration / 8 * 100, 100) + '%';
            } else {
                lastSleep.textContent = 'No data';
                sleepProgress.style.width = '0%';
            }
        }

        function updateAnalytics() {
            const completedHabits = Object.values(currentData.habits).filter(h => h).length;
            const totalHabits = Object.keys(currentData.habits).length;
            const habitCompletion = totalHabits > 0 ? Math.round(completedHabits / totalHabits * 100) : 0;
            const totalCaloriesBurned = currentData.exercises.reduce((sum, ex) => sum + ex.calories, 0);

            document.getElementById('stat-water').textContent = currentData.water_count;
            document.getElementById('stat-exercise').textContent = currentData.exercises.length;
            document.getElementById('stat-habits').textContent = habitCompletion + '%';
            document.getElementById('stat-calories').textContent = totalCaloriesBurned;
        }

        function updateAllDisplays() {
            updateWaterDisplay();
            updateHabitsDisplay();
            updateMealsDisplay();
            updateExercisesDisplay();
            updateSleepDisplay();
            updateAnalytics();
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'notification ' + type;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Initialize app when page loads
        window.addEventListener('load', initApp);

        // Check for day reset every hour
        setInterval(checkDayReset, 3600000);
    </script>
</body>
</html>
